(window.webpackJsonp=window.webpackJsonp||[]).push([[528],{1994:function(s,t,a){"use strict";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"使用-git-调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-调试"}},[s._v("#")]),s._v(" 使用 Git 调试")]),s._v(" "),a("p",[s._v("Git 也提供了两个工具来辅助你调试项目中的问题。 由于 Git 被设计成适用于几乎所有类型的项目，这些工具是比较通用的，但它们可以在出现问题的时候帮助你找到 bug 或者错误。")]),s._v(" "),a("h2",{attrs:{id:"文件标注"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件标注"}},[s._v("#")]),s._v(" 文件标注")]),s._v(" "),a("p",[a("strong",[s._v("如果你在追踪代码中的一个 bug")]),s._v(" ，并且 "),a("strong",[s._v("想知道是什么时候以及为何会引入")]),s._v("，"),a("strong",[s._v("文件标注")]),s._v(" 通常是最好用的工具。 它"),a("strong",[s._v("展示了文件中每一行最后一次修改的提交")]),s._v(" 。 所以，如果你在代码中看到一个有问题的方法，你可以使用  "),a("code",[s._v("git blame")]),s._v("  标注这个文件，查看这个方法每一行的最后修改时间以及是被谁修改的。 这个例子使用 "),a("code",[s._v("-L")]),s._v(" 选项来限制输出范围在第 12 至 22 行：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" blame -L "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12,22")]),s._v(" simplegit.rb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 最后一次提交 SHA-1 , 作者以及时间 ,                行号  文件内容")]),s._v("\n^4832fe2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-03-15 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":31:28 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  def show"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'master'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n^4832fe2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-03-15 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":31:28 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git show #{tree}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n^4832fe2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-03-15 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":31:28 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  end\n^4832fe2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-03-15 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":31:28 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n9f6560e4 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-03-17 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":52:20 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  def log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'master'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n79eaf55d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-04-06 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":15:08 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git log #{tree}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n9f6560e4 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-03-17 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":52:20 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  end\n9f6560e4 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott Chacon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-03-17 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":52:20 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n42cf2861 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Magnus Chacon "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-04-13 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":45:01 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  def blame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n42cf2861 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Magnus Chacon "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-04-13 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":45:01 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git blame #{path}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n42cf2861 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Magnus Chacon "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2008")]),s._v("-04-13 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(":45:01 -0700 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  end\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("请注意，第一个字段是最后一次修改该行的提交的部分 SHA-1 值。 接下来两个字段的值是 "),a("strong",[s._v("从提交中提取出来的——作者的名字以及提交的时间")]),s._v(" ——所以你就可以很轻易地找到是谁在什么时候修改了那一行。 接下来就是行号和文件内容。 注意一下 "),a("code",[s._v("^4832fe2")]),s._v("  这个提交的那些行，"),a("strong",[s._v("这些指的是这个文件第一次提交的那些行")]),s._v("。 "),a("strong",[s._v("这个提交是这个文件第一次加入到这个项目时的提交")]),s._v("，"),a("strong",[s._v("并且这些行从未被修改过")]),s._v("。 这会带来小小的困惑，因为你已经至少看到三种 Git 使用 "),a("code",[s._v("^")]),s._v("  来修饰一个提交的 SHA-1 值的不同含义，但这里确实就是这个意思。")]),s._v(" "),a("p",[a("strong",[s._v("另一件比较酷的事情是 Git 不会显式地记录文件的重命名")]),s._v("。 它会记录快照，然后在事后尝试计算出重命名的动作。 这其中有一个很有意思的特性就是你可以让 Git 找出所有的代码移动。 如果你在 "),a("code",[s._v("git blame")]),s._v("  后面加上一个  "),a("code",[s._v("-C")]),s._v(" ，Git 会分析你正在标注的文件，并且尝试找出文件中从别的地方复制过来的代码片段的原始出处。 比如，你将  "),a("code",[s._v("GITServerHandler.m")]),s._v("   这个文件拆分为数个文件，其中一个文件是 "),a("code",[s._v("GITPackUpload.m")]),s._v("。 对  "),a("code",[s._v("GITPackUpload.m")]),s._v("  执行带  "),a("code",[s._v("-C")]),s._v("  参数的 blame 命令，你就可以看到代码块的原始出处：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" blame -C -L "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("141,153")]),s._v(" GITPackUpload.m\nf344f58d GITServerHandler.m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-01-04 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("141")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nf344f58d GITServerHandler.m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-01-04 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("142")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" gatherObjectShasFromC\nf344f58d GITServerHandler.m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-01-04 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("143")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n70befddd GITServerHandler.m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-03-22 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("         //NSLog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("@"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GATHER COMMI\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [g\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)\nad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@"')]),s._v("GATHER COMMI\nad11ac80 GITPackUpload.m    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-03-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n56ef2caf GITServerHandler.m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-01-05 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("151")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("         if"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n56ef2caf GITServerHandler.m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-01-05 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("152")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("refDict setOb\n56ef2caf GITServerHandler.m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Scott "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v("-01-05 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("153")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("这个功能很有用。 通常来说，你会认为复制代码过来的那个提交是最原始的提交，因为那是你第一次在这个文件中修改了这几行。 但 Git 会告诉你，你第一次写这几行代码的那个提交才是原始提交，即使这是在另外一个文件里写的。")]),s._v(" "),a("h2",{attrs:{id:"二分查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[s._v("#")]),s._v(" 二分查找")]),s._v(" "),a("p",[a("strong",[s._v("当你知道问题是在哪里引入的情况下文件标注可以帮助你查找问题")]),s._v("。 如果你不知道哪里出了问题，并且自从上次可以正常运行到现在已经有数十个或者上百个提交，这个时候你可以使用 "),a("code",[s._v("git bisect")]),s._v("  来帮助查找。 "),a("strong",[s._v("bisect 命令会对你的提交历史进行二分查找来帮助你尽快找到是哪一个提交引入了问题")]),s._v("。")]),s._v(" "),a("p",[s._v("假设你刚刚在线上环境部署了你的代码，接着收到一些 bug 反馈，但这些 bug 在你之前的开发环境里没有出现过，这让你百思不得其解。 你重新查看了你的代码，发现这个问题是可以被重现的，但是你不知道哪里出了问题。 你可以用二分法来找到这个问题。 首先执行 "),a("code",[s._v("git bisect start")]),s._v("  来启动，接着执行  "),a("code",[s._v("git bisect bad")]),s._v("  来告诉系统当前你所在的提交是有问题的。 然后你必须告诉  "),a("code",[s._v("bisect")]),s._v("  已知的最后一次正常状态是哪次提交，使用  "),a("code",[s._v("git bisect good [good_commit]")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect start\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect bad\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect good v1.0\nBisecting: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" revisions left to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" after this\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ecb6e1bc347ccecc5f9350d878ce677feb13d3b2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" error handling on repo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("Git 发现在你标记为正常的提交(v1.0)和当前的错误版本之间有大约 12 次提交，于是 Git 检出中间的那个提交。 现在你可以执行测试，看看在这个提交下问题是不是还是存在。 如果还存在，说明问题是在这个提交之前引入的；如果问题不存在，说明问题是在这个提交之后引入的。 假设测试结果是没有问题的，你可以通过 "),a("code",[s._v("git bisect good")]),s._v("  来告诉 Git，然后继续寻找。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect good\nBisecting: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" revisions left to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" after this\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("b047b02ea83310a70fd603dc8cd7a6cd13d15c04"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" secure this thing\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这个提交是正常的，现在 Git 拥有的信息已经可以确定引入问题的位置在哪里。 它会告诉你第一个错误提交的 SHA-1 值并显示一些提交说明，以及哪些文件在那次提交里修改过，这样你可以找出引入 bug 的根源：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect good\nb047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit\ncommit b047b02ea83310a70fd603dc8cd7a6cd13d15c04\nAuthor: PJ Hyett "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("pjhyett@example.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nDate:   Tue Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":48:32 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v(" -0800\n\n    secure this thing\n\n:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730\nf24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  config\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("当你完成这些操作之后，你应该执行 "),a("code",[s._v("git bisect reset")]),s._v("  重置你的 HEAD 指针到最开始的位置，否则你会停留在一个很奇怪的状态：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect reset\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这是一个可以帮助你在几分钟内从数百个提交中找到 bug 的强大工具。 事实上，如果你有一个脚本在项目是正常的情况下返回 0，在不正常的情况下返回非 0，你可以使  "),a("code",[s._v("git bisect")]),s._v("  自动化这些操作。 首先，你设定好项目正常以及不正常所在提交的二分查找范围。 你可以通过  "),a("code",[s._v("bisect start")]),s._v("  命令的参数来设定这两个提交，第一个参数是项目不正常的提交，第二个参数是项目正常的提交：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect start HEAD v1.0\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" bisect run test-error.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("Git 会自动在每个被检出的提交里执行 test-error.sh 直到找到第一个项目不正常的提交。 你也可以执行 make 或者 make tests 或者其他东西来进行自动化测试。")])])}),[],!1,null,null,null);t.default=e.exports}}]);