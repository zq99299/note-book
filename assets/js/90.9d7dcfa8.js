(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{1066:function(a,t,s){a.exports=s.p+"assets/img/cbd885a7a0e902199d2ba8a3edb463c1.e53d439a.png"},1067:function(a,t,s){a.exports=s.p+"assets/img/8346bf7589280aba828052438de14c39.990561a5.png"},1068:function(a,t,s){a.exports=s.p+"assets/img/4c6f7dfe7dd8386be15c5e78c48a0bd3.ecfb3028.png"},1973:function(a,t,s){"use strict";s.r(t);var e=s(13),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"gitlab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab"}},[a._v("#")]),a._v(" GitLab")]),a._v(" "),e("p",[a._v("虽然 GitWeb 相当简单。 但如果你正在寻找一个更现代，功能更全的 Git 服务器，这里有几个开源的解决方案可供你选择安装。 因为 GitLab 是其中最出名的一个，我们将它作为示例并讨论它的安装和使用。 这比 GitWeb 要复杂的多并且需要更多的维护，但它的确是一个功能更全的选择。")]),a._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),e("p",[a._v("GitLab 是一个数据库支持的 web 应用，所以相比于其他 git 服务器，它的安装过程涉及到更多的东西。 幸运的是，这个过程有非常详细的文档说明和支持。")]),a._v(" "),e("p",[a._v("这里有一些可参考的方法帮你安装 GitLab 。 为了更快速的启动和运行，你可以下载虚拟机镜像或者在 https://bitnami.com/stack/gitlab 上获取一键安装包，同时调整配置使之符合你特定的环境。 Bitnami 的一个优点在于它的登录界面（通过 alt-&rarr 键进入；）；它会告诉你安装好的 GitLab 的 IP 地址以及默认的用户名和密码。")]),a._v(" "),e("p",[a._v("本次笔者采用 "),e("a",{attrs:{href:"https://docs.gitlab.com/omnibus/docker/",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker 方式安装"),e("OutboundLink")],1)]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置 gitlab 的数据目录存储位置")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GITLAB_HOME")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/srv/gitlab\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装并运行一个 gitlab 容器")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 注意本机 22 端口被占用问题，修改宿主机端口 22 为 2222 ")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run --detach "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --hostname "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".110.110 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --publish "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("443")]),a._v(":443 --publish "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(":80 --publish "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),a._v(":22 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --name gitlab "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --restart always "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --volume "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GITLAB_HOME")]),a._v("/config:/etc/gitlab "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --volume "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GITLAB_HOME")]),a._v("/logs:/var/log/gitlab "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --volume "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GITLAB_HOME")]),a._v("/data:/var/opt/gitlab "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  gitlab/gitlab-ee:latest\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看 gitlab 容器初始化进度")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 如果提示权限相关错误，则可能是 SELinux 的问题，请选择关闭 SELinux 或则 选择官方另外一个 SELinux 的安装命令")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker logs -f gitlab\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 然后就是等待了，时长视你的网络情况")]),a._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看已经开放端口")]),a._v("\nfirewall-cmd --zone"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("public --list-ports\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 开放宿主机端口")]),a._v("\nfirewall-cmd --zone"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("public --add-port"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("/tcp --permanent\nfirewall-cmd --zone"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("public --add-port"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2222")]),a._v("/tcp --permanent\nfirewall-cmd --zone"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("public --add-port"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("443")]),a._v("/tcp --permanent\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 最后访问 192.168.110.110 ：首次访问会跳转冲重置 root 密码界面，重置后，就可以通过 root 登录了")]),a._v("\n\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br")])]),e("h2",{attrs:{id:"管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理"}},[a._v("#")]),a._v(" 管理")]),a._v(" "),e("p",[a._v("GitLab 的管理界面是通过网络进入的。 将你的浏览器转到已经安装 GitLab 的 主机名或 IP 地址，然后以管理员身份登录即可。 默认的用户名是 admin@local.host，默认的密码是 5iveL!fe（你会得到类似 请登录后尽快更换密码 的提示）。 登录后，点击主栏上方靠右位置的 “Admin area” 图标进行管理。")]),a._v(" "),e("p",[e("img",{attrs:{src:s(1066),alt:"GitLab 主栏的 ``Admin area'' 图标。"}})]),a._v(" "),e("h2",{attrs:{id:"使用者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用者"}},[a._v("#")]),a._v(" 使用者")]),a._v(" "),e("p",[a._v("GitLab 上的用户指的是对应协作者的帐号。 用户帐号没有很多复杂的地方，主要是包含登录数据的用户信息集合。 每一个用户账号都有一个 "),e("strong",[a._v("命名空间")]),a._v(" ，即该用户项目的逻辑集合。 如果一个叫 jane 的用户拥有一个名称是 project 的项目，那么这个项目的 url 会是 http://server/jane/project 。")]),a._v(" "),e("p",[e("img",{attrs:{src:s(1067),alt:".GitLab 用户管理界面。"}})]),a._v(" "),e("p",[a._v("移除一个用户有两种方法。 「屏蔽（Blocking）」 一个用户阻止他登录 GitLab 实例，但是该用户命名空间下的所有数据仍然会被保存，并且仍可以通过该用户提交对应的登录邮箱链接回他的个人信息页。")]),a._v(" "),e("p",[a._v("而另一方面，销毁「（Destroying）」 一个用户，会彻底的将他从数据库和文件系统中移除。 他命名空间下的所有项目和数据都会被删除，拥有的任何组也会被移除。 这显然是一个更永久且更具破坏力的行为，所以很少用到这种方法。")]),a._v(" "),e("h2",{attrs:{id:"组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组"}},[a._v("#")]),a._v(" 组")]),a._v(" "),e("p",[a._v("一个 GitLab 的组是一些项目的集合，连同关于多少用户可以访问这些项目的数据。 每一个组都有一个项目命名空间（与用户一样），所以如果一个叫 training 的组拥有一个名称是 materials 的项目，那么这个项目的 url 会是 http://server/training/materials 。")]),a._v(" "),e("p",[e("img",{attrs:{src:s(1068),alt:"GitLab组 管理界面。"}})]),a._v(" "),e("p",[a._v("每一个组都有许多用户与之关联，每一个用户对组中的项目以及组本身的权限都有级别区分。 权限的范围从 「访客」（仅能提问题和讨论） 到 「拥有者」（完全控制组、成员和项目）。 权限的种类太多以至于难以在这里一一列举，不过在 GitLab 的管理界面上有帮助链接。")]),a._v(" "),e("h2",{attrs:{id:"项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目"}},[a._v("#")]),a._v(" 项目")]),a._v(" "),e("p",[a._v("一个 GitLab 的项目相当于 git 的版本库。 每一个项目都属于一个用户或者一个组的单个命名空间。 如果这个项目属于一个用户，那么这个拥有者对所有可以获取这个项目的人拥有直接管理权；如果这个项目属于一个组，那么该组中用户级别的权限也会起作用。")]),a._v(" "),e("p",[a._v("每一个项目都有一个可视级别，控制着谁可以看到这个项目页面和仓库。 如果一个项目是 "),e("em",[a._v("私有")]),a._v(" 的，这个项目的拥有者必须明确授权从而使特定的用户可以访问。 一个 "),e("em",[a._v("内部")]),a._v(" 的项目可以被所有登录的人看到，而一个"),e("em",[a._v("公开")]),a._v(" 的项目则是对所有人可见的。 注意，这种控制既包括 "),e("code",[a._v("git “fetch”")]),a._v("  的使用也包括对项目 web 用户界面的访问。")]),a._v(" "),e("h2",{attrs:{id:"钩子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#钩子"}},[a._v("#")]),a._v(" 钩子")]),a._v(" "),e("p",[a._v("GitLab 在 "),e("strong",[a._v("项目")]),a._v(" 和 "),e("strong",[a._v("系统")]),a._v(" 级别上都支持钩子程序。 对任意级别，当有相关事件发生时，GitLab 的服务器会执行一个包含描述性 JSON 数据的 HTTP 请求。 这是自动化连接你的 git 版本库和 GitLab 实例到其他的开发工具，比如 CI 服务器，聊天室，或者部署工具的一个极好方法。")]),a._v(" "),e("h3",{attrs:{id:"基本用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本用途"}},[a._v("#")]),a._v(" 基本用途")]),a._v(" "),e("p",[a._v("你想要在 GitLab 做的第一件事就是建立一个新项目。 这通过点击工具栏上的  「+」图标完成。 你会被要求填写项目名称，也就是这个项目所属的命名空间，以及它的可视层级。 绝大多数的设定并不是永久的，可以通过设置界面重新调整。 点击 「Create Project」，你就完成了。")]),a._v(" "),e("p",[a._v("项目存在后，你可能会想将它与本地的 Git 版本库连接。 每一个项目都可以通过 HTTPS 或者 SSH 连接，任意两者都可以被用来配置远程 Git。 在项目主页的顶栏可以看到这个项目的 URLs。 对于一个存在的本地版本库，这个命令将会向主机位置添加一个叫 gitlab 的远程仓库：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ git remote add gitlab https://server/namespace/project.git\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("如果你的本地没有版本库的副本，你可以这样做：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ git clone https://server/namespace/project.git\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("web 用户界面提供了几个有用的获取版本库信息的网页。 每一个项目的主页都显示了最近的活动，并且通过顶部的链接可以使你浏览项目文件以及提交日志。")]),a._v(" "),e("h2",{attrs:{id:"一起工作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一起工作"}},[a._v("#")]),a._v(" 一起工作")]),a._v(" "),e("p",[a._v("在一个 GitLab 项目上一起工作的最简单方法就是赋予协作者对 git 版本库的直接 push 权限。 你可以通过项目设定的 「Members（成员）」 部分向一个项目添加写作者，并且将这个新的协作者与一个访问级别关联（不同的访问级别在 组 中已简单讨论）。 通过赋予一个协作者 「Developer（开发者）」或者更高的访问级别，这个用户就可以毫无约束地直接向版本库或者向分支进行提交。")]),a._v(" "),e("p",[a._v("另外一个让合作 "),e("strong",[a._v("更解耦")]),a._v(" 的方法就是使用 "),e("strong",[a._v("合并请求")]),a._v("。 它的优点在于让任何能够看到这个项目的协作者在被管控的情况下对这个项目作出贡献。 可以直接访问的协作者能够简单的创建一个分支，向这个分支进行提交，也可以开启一个向 master 或者其他任何一个分支的合并请求。 "),e("strong",[a._v("对版本库没有推送权限")]),a._v(" 的协作者则可以 「"),e("strong",[a._v("fork")]),a._v("」 这个版本库（即创建属于自己的这个库的副本），向 "),e("em",[a._v("那个")]),a._v(" 副本进行提交，然后从那个副本开启一个到主项目的合并请求。 这个模型使得项目拥有者完全控制着向版本库的提交，以及什么时候允许加入陌生协作者的贡献。")]),a._v(" "),e("p",[a._v("在 GitLab 中合并请求和问题是一个长久讨论的主要部分。 每一个合并请求都允许在提出改变的行进行讨论（它支持一个轻量级的代码审查），也允许对一个总体性话题进行讨论。 两者都可以被分配给用户，或者组织到 milestones（里程碑） 界面。")]),a._v(" "),e("p",[a._v("这个部分主要聚焦于在 GitLab 中与 Git 相关的特性，但是 GitLab 作为一个成熟的系统，它提供了许多其他产品来帮助你协同工作，例如项目 wiki 与系统维护工具。 GitLab 的一个优点在于，服务器设置和运行以后，你将很少需要调整配置文件或通过 SSH 连接服务器；绝大多数的管理和日常使用都可以在浏览器界面中完成。")])])}),[],!1,null,null,null);t.default=n.exports}}]);