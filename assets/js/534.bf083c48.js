(window.webpackJsonp=window.webpackJsonp||[]).push([[534],{2004:function(t,v,_){"use strict";_.r(v);var e=_(13),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git-钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-钩子"}},[t._v("#")]),t._v(" Git 钩子")]),t._v(" "),_("p",[t._v("和其它版本控制系统一样，"),_("strong",[t._v("Git 能在特定的重要动作发生时触发自定义脚本")]),t._v("。 有两组这样的钩子：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("客户端的")]),t._v(" "),_("p",[t._v("客户端钩子由诸如提交和合并这样的操作所调用")])]),t._v(" "),_("li",[_("p",[t._v("服务器端")]),t._v(" "),_("p",[t._v("服务器端钩子作用于诸如接收被推送的提交这样的联网操作")])])]),t._v(" "),_("p",[t._v("你可以随心所欲地运用这些钩子。")]),t._v(" "),_("h2",{attrs:{id:"安装一个钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装一个钩子"}},[t._v("#")]),t._v(" 安装一个钩子")]),t._v(" "),_("p",[t._v("钩子都被存储在 Git 目录下的  "),_("code",[t._v("hooks")]),t._v("  子目录中。 也即绝大部分项目中的  "),_("code",[t._v(".git/hooks")]),t._v(" 。 当你用  "),_("code",[t._v("git init")]),t._v(" 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。 这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 "),_("code",[t._v("Ruby")]),t._v("  或  "),_("code",[t._v("Python")]),t._v("，或任何你熟悉的语言编写它们。 这些示例的名字都是以  "),_("code",[t._v(".sample")]),t._v("  结尾，如果你想启用它们，得先移除这个后缀。")]),t._v(" "),_("p",[t._v("把一个正确命名（不带扩展名）且可执行的文件放入 "),_("code",[t._v(".git")]),t._v(" 目录下的 "),_("code",[t._v("hooks")]),t._v(" 子目录中，即可激活该钩子脚本。 这样一来，它就能被 Git 调用。接下来，我们会讲解常用的钩子脚本类型。")]),t._v(" "),_("h2",{attrs:{id:"客户端钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#客户端钩子"}},[t._v("#")]),t._v(" 客户端钩子")]),t._v(" "),_("p",[t._v("客户端钩子分为很多种。 下面把它们分为："),_("strong",[t._v("提交工作流钩子")]),t._v("、"),_("strong",[t._v("电子邮件工作流钩子")]),t._v(" 和 "),_("strong",[t._v("其它钩子")]),t._v("。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),_("p",[t._v("需要注意的是，克隆某个版本库时，它的客户端钩子 "),_("strong",[t._v("并不")]),t._v(" 随同复制。 如果需要靠这些脚本来强制维持某种策略，建议你在服务器端实现这一功能。 （请参照 "),_("RouterLink",{attrs:{to:"/git-scm/08/04.html"}},[t._v("使用强制策略的一个例子")]),t._v(" 中的例子。）")],1)]),t._v(" "),_("h3",{attrs:{id:"提交工作流钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交工作流钩子"}},[t._v("#")]),t._v(" 提交工作流钩子")]),t._v(" "),_("p",[t._v("前四个钩子涉及提交的过程。")]),t._v(" "),_("h4",{attrs:{id:"pre-commit"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pre-commit"}},[t._v("#")]),t._v(" pre-commit")]),t._v(" "),_("p",[_("code",[t._v("pre-commit")]),t._v(" "),_("strong",[t._v("钩子在键入提交信息前运行。")])]),t._v(" "),_("p",[_("strong",[t._v("它用于检查即将提交的快照")]),t._v("，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 "),_("strong",[t._v("如果该钩子以非零值退出，Git 将放弃此次提交")]),t._v("，不过你可以用  "),_("code",[t._v("git commit --no-verify")]),t._v("  来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似  "),_("code",[t._v("lint")]),t._v("  的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。")]),t._v(" "),_("h4",{attrs:{id:"prepare-commit-msg"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#prepare-commit-msg"}},[t._v("#")]),t._v(" prepare-commit-msg")]),t._v(" "),_("p",[_("code",[t._v("prepare-commit-msg")]),t._v(" "),_("strong",[t._v("钩子在启动提交信息编辑器之前，默认信息被创建之后运行")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("它允许你编辑提交者所看到的默认信息")]),t._v("。 该钩子接收一些选项：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("存有当前提交信息的文件的路径")])]),t._v(" "),_("li",[_("p",[t._v("提交类型和修补提交的提交的 SHA-1 校验。")])])]),t._v(" "),_("p",[t._v("它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。")]),t._v(" "),_("h4",{attrs:{id:"commit-msg"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#commit-msg"}},[t._v("#")]),t._v(" commit-msg")]),t._v(" "),_("p",[_("code",[t._v("commit-msg")]),t._v(" "),_("strong",[t._v("钩子接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径")]),t._v("。")]),t._v(" "),_("p",[t._v("如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。")]),t._v(" "),_("h4",{attrs:{id:"post-commit"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post-commit"}},[t._v("#")]),t._v(" post-commit")]),t._v(" "),_("p",[_("code",[t._v("post-commit")]),t._v(" "),_("strong",[t._v("钩子在整个提交过程完成后运行")]),t._v("。")]),t._v(" "),_("p",[t._v("它不接收任何参数，但你可以很容易地通过运行  "),_("code",[t._v("git log -1 HEAD")]),t._v("  来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。")]),t._v(" "),_("h3",{attrs:{id:"电子邮件工作流钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#电子邮件工作流钩子"}},[t._v("#")]),t._v(" 电子邮件工作流钩子")]),t._v(" "),_("p",[t._v("你可以给电子邮件工作流设置三个客户端钩子。 它们都是由  "),_("code",[t._v("git am")]),t._v("  命令调用的，因此如果你没有在你的工作流中用到这个命令，可以跳到下一节。 如果你需要通过电子邮件接收由  "),_("code",[t._v("git format-patch")]),t._v("  产生的补丁，这些钩子也许用得上。")]),t._v(" "),_("h4",{attrs:{id:"applypatch-msg"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#applypatch-msg"}},[t._v("#")]),t._v(" applypatch-msg")]),t._v(" "),_("p",[t._v("第一个运行的钩子是 "),_("code",[t._v("applypatch-msg")]),t._v(" 。")]),t._v(" "),_("p",[t._v("它接收单个参数："),_("strong",[t._v("包含请求合并信息的临时文件的名字")]),t._v("。")]),t._v(" "),_("p",[t._v("如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。")]),t._v(" "),_("h4",{attrs:{id:"pre-applypatch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pre-applypatch"}},[t._v("#")]),t._v(" pre-applypatch")]),t._v(" "),_("p",[t._v("下一个在 "),_("code",[t._v("git am")]),t._v(" 运行期间被调用的是 "),_("code",[t._v("pre-applypatch")]),t._v(" 。")]),t._v(" "),_("p",[t._v("有些难以理解的是，"),_("strong",[t._v("它正好运行于应用补丁 "),_("em",[t._v("之后")])]),t._v("，"),_("strong",[t._v("产生提交之前")]),t._v("，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断  "),_("code",[t._v("git am")]),t._v("  的运行，这样补丁就不会被提交。")]),t._v(" "),_("h4",{attrs:{id:"post-applypatch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post-applypatch"}},[t._v("#")]),t._v(" post-applypatch")]),t._v(" "),_("p",[_("code",[t._v("post-applypatch")]),t._v(" "),_("strong",[t._v("运行于提交产生之后")]),t._v("，是在  "),_("code",[t._v("git am")]),t._v("  运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。")]),t._v(" "),_("h3",{attrs:{id:"其它客户端钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其它客户端钩子"}},[t._v("#")]),t._v(" 其它客户端钩子")]),t._v(" "),_("h4",{attrs:{id:"pre-rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pre-rebase"}},[t._v("#")]),t._v(" pre-rebase")]),t._v(" "),_("p",[_("code",[t._v("pre-rebase")]),t._v(" "),_("strong",[t._v("钩子运行于变基之前")]),t._v("，以非零值退出可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。 Git 自带的  "),_("code",[t._v("pre-rebase")]),t._v("  钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。")]),t._v(" "),_("h4",{attrs:{id:"post-rewrite"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post-rewrite"}},[t._v("#")]),t._v(" post-rewrite")]),t._v(" "),_("p",[_("code",[t._v("post-rewrite")]),t._v(" "),_("strong",[t._v("钩子被那些会替换提交记录的命令调用")]),t._v("，比如  "),_("code",[t._v("git commit --amend")]),t._v("  和  "),_("code",[t._v("git rebase")]),t._v("（不过不包括  "),_("code",[t._v("git filter-branch")]),t._v("）。 它唯一的参数是触发重写的命令名，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟  "),_("code",[t._v("post-checkout")]),t._v("  和  "),_("code",[t._v("post-merge")]),t._v("  差不多。")]),t._v(" "),_("h4",{attrs:{id:"post-checkout"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post-checkout"}},[t._v("#")]),t._v(" post-checkout")]),t._v(" "),_("p",[t._v("在  "),_("code",[t._v("git checkout")]),t._v("  成功运行后，"),_("code",[t._v("post-checkout")]),t._v(" 钩子会被调用。你可以根据你的项目环境用它调整你的工作目录。 其中包括放入大的二进制文件、自动生成文档或进行其他类似这样的操作。")]),t._v(" "),_("h4",{attrs:{id:"post-merge"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post-merge"}},[t._v("#")]),t._v(" post-merge")]),t._v(" "),_("p",[t._v("在  "),_("code",[t._v("git merge")]),t._v("  成功运行后，"),_("code",[t._v("post-merge")]),t._v("  钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。")]),t._v(" "),_("h4",{attrs:{id:"pre-push"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pre-push"}},[t._v("#")]),t._v(" pre-push")]),t._v(" "),_("p",[_("code",[t._v("pre-push")]),t._v(" 钩子会在  "),_("code",[t._v("git push")]),t._v("  运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。")]),t._v(" "),_("h4",{attrs:{id:"pre-auto-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pre-auto-gc"}},[t._v("#")]),t._v(" pre-auto-gc")]),t._v(" "),_("p",[t._v("Git 的一些日常操作在运行时，偶尔会调用  "),_("code",[t._v("git gc --auto")]),t._v("  进行垃圾回收。 "),_("code",[t._v("pre-auto-gc")]),t._v(" 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。")]),t._v(" "),_("h2",{attrs:{id:"服务器端钩子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器端钩子"}},[t._v("#")]),t._v(" 服务器端钩子")]),t._v(" "),_("p",[t._v("除了客户端钩子，作为系统管理员，你还可以 "),_("strong",[t._v("使用若干服务器端的钩子对项目强制执行各种类型的策略")]),t._v("。 这些钩子脚本在 "),_("strong",[t._v("推送到服务器之前和之后运行")]),t._v("。 "),_("strong",[t._v("推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息")]),t._v("，还可以依你所想设置足够复杂的推送策略。")]),t._v(" "),_("h3",{attrs:{id:"pre-receive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pre-receive"}},[t._v("#")]),t._v(" pre-receive")]),t._v(" "),_("p",[t._v("处理来自客户端的推送操作时，最先被调用的脚本是  "),_("code",[t._v("pre-receive")]),t._v("。 "),_("strong",[t._v("它从标准输入获取一系列被推送的引用")]),t._v("。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。")]),t._v(" "),_("h3",{attrs:{id:"update"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" update")]),t._v(" "),_("p",[_("code",[t._v("update")]),t._v("  脚本和 "),_("code",[t._v("pre-receive")]),t._v(" 脚本十分类似，"),_("strong",[t._v("不同之处在于它会为每一个准备更新的分支各运行一次")]),t._v("。 假如推送者同时向多个分支推送内容，"),_("code",[t._v("pre-receive")]),t._v("  只运行一次，相比之下  "),_("code",[t._v("update")]),t._v("  则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数："),_("strong",[t._v("引用的名字（分支）")]),t._v("，"),_("strong",[t._v("推送前的引用指向的内容的 SHA-1 值")]),t._v("，以及 "),_("strong",[t._v("用户准备推送的内容的 SHA-1 值")]),t._v("。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。")]),t._v(" "),_("h3",{attrs:{id:"post-receive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post-receive"}},[t._v("#")]),t._v(" post-receive")]),t._v(" "),_("p",[_("code",[t._v("post-receive")]),t._v(" "),_("strong",[t._v("挂钩在整个过程完结以后运行")]),t._v("，可以用来更新其他系统服务或者通知用户。 它接受与  "),_("code",[t._v("pre-receive")]),t._v(" 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。")])])}),[],!1,null,null,null);v.default=a.exports}}]);