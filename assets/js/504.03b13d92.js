(window.webpackJsonp=window.webpackJsonp||[]).push([[504],{1954:function(s,t,e){"use strict";e.r(t);var a=e(13),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"撤销操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销操作"}},[s._v("#")]),s._v(" 撤销操作")]),s._v(" "),e("p",[s._v("在任何一个阶段，你都有可能想要撤消某些操作。 这里，我们将会学习几个撤消你所做修改的基本工具。 注意，"),e("strong",[s._v("有些撤消操作是不可逆")]),s._v(" 的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。")]),s._v(" "),e("h2",{attrs:{id:"修正提交-amend"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修正提交-amend"}},[s._v("#")]),s._v(" 修正提交 "),e("code",[s._v("--amend")])]),s._v(" "),e("p",[s._v("有时候我们提交完了才发现 "),e("strong",[s._v("漏掉")]),s._v(" 了几个文件没有添加，或者 "),e("strong",[s._v("提交信息写错")]),s._v(" 了。 此时，可以运行带有 –amend 选项的提交命令尝试重新提交：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ git commit --amend\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这个命令会将 "),e("strong",[s._v("暂存区中的文件提交")]),s._v("。 如果 "),e("strong",[s._v("自上次提交以来你还未做任何修改")]),s._v("（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。")]),s._v(" "),e("p",[s._v("文本编辑器启动后，可以看到之前的提交信息。 编辑后保存会覆盖原来的提交信息。")]),s._v(" "),e("p",[s._v("例如，你 "),e("strong",[s._v("提交后")]),s._v(" 发现忘记了暂存某些需要的修改，可以像下面这样操作：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先提交了")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'initial commit'")]),s._v("   \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后发现少提交了一个文件，这里 add 后")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" forgotten_file\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 再进行修正，会弹出之前的提交信息，供你进行修改")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提交之后，效果就是修正了前面一个的提交，而不是多了一个新的提交")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个还是非常有用的")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("最终你只会有一个提交 – 第二次提交将代替第一次提交的结果。")]),s._v(" "),e("h2",{attrs:{id:"取消暂存的文件-reset-head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取消暂存的文件-reset-head"}},[s._v("#")]),s._v(" 取消暂存的文件  "),e("code",[s._v("reset HEAD")])]),s._v(" "),e("p",[s._v("接下来的两个小节演示如何操作 "),e("strong",[s._v("暂存区域")]),s._v(" 与 "),e("strong",[s._v("工作目录中已修改的文件")]),s._v("。 这些命令在修改文件状态的同时，也会提示如何撤消操作。 例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了 "),e("code",[s._v("git add *")]),s._v("  暂存了它们两个。 "),e("strong",[s._v("如何只取消暂存两个中的一个呢？")]),s._v(" git status 命令提示了你：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ git add *\n$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    renamed:    README.md -> README\n    modified:   CONTRIBUTING.md\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("在 "),e("strong",[s._v("Changes to be committed")]),s._v(" 文字正下方，提示使用 "),e("code",[s._v("git reset HEAD <file>…")]),s._v("  来取消暂存。 所以，我们可以这样来取消暂存 CONTRIBUTING.md 文件：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ git reset HEAD CONTRIBUTING.md\nUnstaged changes after reset:\nM\tCONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    renamed:    README.md -> README\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("这个命令有点儿奇怪，但是起作用了。 CONTRIBUTING.md 文件已经是修改未暂存的状态了。")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),e("p",[s._v("虽然在调用时加上 –hard 选项 可以令 git reset 成为一个危险的命令（译注："),e("strong",[s._v("可能导致工作目录中所有当前进度丢失！")]),s._v("），但本例中工作目录内的文件并不会被修改。 "),e("strong",[s._v("不加选项地调用 git reset 并不危险 — 它只会修改暂存区域")]),s._v("。")])]),s._v(" "),e("p",[s._v("到目前为止这个神奇的调用就是你需要对 git reset 命令了解的全部。我们将会在 "),e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/ch00/_git_reset",target:"_blank",rel:"noopener noreferrer"}},[s._v("重置揭密"),e("OutboundLink")],1),s._v(" 中了解 reset 的更多细节以及如何掌握它做一些真正有趣的事。")]),s._v(" "),e("h2",{attrs:{id:"撤消对文件的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤消对文件的修改"}},[s._v("#")]),s._v(" 撤消对文件的修改")]),s._v(" "),e("p",[s._v("如果你并不想保留对 CONTRIBUTING.md 文件的修改怎么办？ 你该如何方便地撤消修改 –  "),e("strong",[s._v("将它还原成上次提交时的样子")]),s._v("（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？ 幸运的是，git status 也告诉了你应该如何做。 在最后一个例子中，未暂存区域是这样：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Changes not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("它非常清楚地告诉了你如何撤消之前所做的修改。 让我们来按照提示执行：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ git checkout -- CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    renamed:    README.md -> README\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("可以看到那些修改已经被撤消了。")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),e("p",[s._v("你需要知道 "),e("code",[s._v("git checkout — [file]")]),s._v(" 是一个 "),e("strong",[s._v("危险的命令")]),s._v("，这很重要。 你 "),e("strong",[s._v("对那个文件做的任何修改都会消失")]),s._v(" – 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。")])]),s._v(" "),e("p",[s._v("如果你仍然想保留对那个文件做出的修改，但是现在仍然需要撤消，我们将会在 "),e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/ch00/_git_branching",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git 分支"),e("OutboundLink")],1),s._v(" 介绍保存进度与分支；这些通常是更好的做法。")]),s._v(" "),e("p",[s._v("记住，在 Git 中任何 "),e("em",[s._v("已提交的")]),s._v(" 东西 "),e("strong",[s._v("几乎总是可以恢复")]),s._v(" 的。 甚至那些被删除的分支中的提交或使用  "),e("code",[s._v("–amend")]),s._v("  选项覆盖的提交也可以恢复（阅读  "),e("a",{attrs:{href:""}},[s._v("数据恢复")]),s._v("  了解数据恢复）。 然而，任何你未提交的东西丢失后很可能再也找不到了。")])])}),[],!1,null,null,null);t.default=n.exports}}]);