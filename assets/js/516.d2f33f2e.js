(window.webpackJsonp=window.webpackJsonp||[]).push([[516],{1969:function(s,e,t){"use strict";t.r(e);var a=t(13),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"smart-http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#smart-http"}},[s._v("#")]),s._v(" Smart HTTP")]),s._v(" "),t("p",[s._v("我们一般通过 "),t("strong",[s._v("SSH 进行授权访问")]),s._v("，通过 "),t("code",[s._v("git://")]),s._v(" "),t("strong",[s._v("进行无授权访问")]),s._v("，但是还有一种协议可以 "),t("strong",[s._v("同时实现以上两种方式的访问")]),s._v("。 设置 Smart HTTP 一般只需要在服务器上启用一个 Git 自带的名为 "),t("code",[s._v("git-http-backend")]),s._v(" 的 CGI 脚本。 该 CGI 脚本将会读取由 "),t("code",[s._v("git fetch")]),s._v(" 或 "),t("code",[s._v("git push")]),s._v(" 命令向 HTTP URL 发送的请求路径和头部信息，来判断该客户端是否支持 HTTP 通信（不低于 1.6.6 版本的客户端支持此特性）。 如果 CGI 发现该客户端支持智能（Smart）模式，它将会以智能模式与它进行通信，否则它将会回落到哑（Dumb）模式下（因此它可以对某些老的客户端实现向下兼容）。")]),s._v(" "),t("p",[s._v("在完成以上简单的安装步骤后， 我们将用 Apache 来作为 CGI 服务器。 如果你没有安装 Apache，你可以在 Linux 环境下执行如下或类似的命令来安装：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ sudo apt-get install apache2 apache2-utils\n$ a2enmod cgi alias env\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("该操作将会启用 mod_cgi， mod_alias， 和 mod_env 等 Apache 模块， 这些模块都是使该功能正常工作所必须的。")]),s._v(" "),t("p",[s._v("接下来我们要向 Apache 配置文件添加一些内容，来让 git-http-backend 作为 Web 服务器对 /git 路径请求的处理器。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("SetEnv GIT_PROJECT_ROOT /opt/git\nSetEnv GIT_HTTP_EXPORT_ALL\nScriptAlias /git/ /usr/lib/git-core/git-http-backend/\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如果留空 "),t("code",[s._v("GIT_HTTP_EXPORT_ALL")]),s._v(" 这个环境变量，Git 将只对无授权客户端提供带 git-daemon-export-ok 文件的版本库，就像 Git 守护进程一样。")]),s._v(" "),t("p",[s._v("接着你需要让 Apache 接受通过该路径的请求，添加如下的内容至 Apache 配置文件：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<Directory "/usr/lib/git-core*">\n   Options ExecCGI Indexes\n   Order allow,deny\n   Allow from all\n   Require all granted\n</Directory>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("最后，如果想实现写操作授权验证，使用如下的未授权屏蔽配置即可：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<LocationMatch "^/git/.*/git-receive-pack$">\n    AuthType Basic\n    AuthName "Git Access"\n    AuthUserFile /opt/git/.htpasswd\n    Require valid-user\n</LocationMatch>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这需要你创建一个包含所有合法用户密码的 "),t("code",[s._v(".htaccess")]),s._v(" 文件。 以下是一个添加 “schacon” 用户到此文件的例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('$ htdigest -c /opt/git/.htpasswd "Git Access" schacon\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("你可以通过许多方式添加 Apache 授权用户，选择使用其中一种方式即可。 以上仅仅只是我们可以找到的最简单的一个例子。 如果愿意的话，你也可以通过 SSL 运行它，以保证所有数据是在加密状态下进行传输的。")]),s._v(" "),t("p",[s._v("我们不想深入去讲解 Apache 配置文件，因为你可能会使用不同的 Web 服务器，或者可能有不同的授权需求。 它的主要原理是使用一个 Git 附带的，名为 git-http-backend 的 CGI。它被引用来处理协商通过 HTTP 发送和接收的数据。 它本身并不包含任何授权功能，但是授权功能可以在 Web 服务器层引用它时被轻松实现。 你可以在任何所有可以处理 CGI 的 Web 服务器上办到这点，所以随便挑一个你最熟悉的 Web 服务器试手吧。")])])}),[],!1,null,null,null);e.default=n.exports}}]);