(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{1431:function(t,e,s){t.exports=s.p+"assets/img/a72ad4ccc3eb769562c331f230b9c6b2.a72ad4cc.png"},1432:function(t,e,s){t.exports=s.p+"assets/img/ba18101e2109df87288d935b5767c83c.ba18101e.png"},1433:function(t,e,s){t.exports=s.p+"assets/img/fdb97d69e376306e68c4e36d5ddbf830.fdb97d69.png"},1434:function(t,e,s){t.exports=s.p+"assets/img/87d896f423780c43199222e32c4e428a.87d896f4.png"},1435:function(t,e,s){t.exports=s.p+"assets/img/d6a3d486a8c575bc1961b7db5a153d18.d6a3d486.png"},1436:function(t,e,s){t.exports=s.p+"assets/img/4b14f91e4307580bb482c58232c3f1fb.4b14f91e.png"},1437:function(t,e,s){t.exports=s.p+"assets/img/083b6a8af68f56f3120b7c8875329340.083b6a8a.png"},1438:function(t,e,s){t.exports=s.p+"assets/img/3951b939651d32402e9efe63a83e7de6.3951b939.png"},1439:function(t,e,s){t.exports=s.p+"assets/img/b2465f3f8c50432b622ec8704dc8a214.b2465f3f.png"},1440:function(t,e,s){t.exports=s.p+"assets/img/e54e9cedb2fe132b206c3eb3ba0fae43.e54e9ced.png"},1441:function(t,e,s){t.exports=s.p+"assets/img/588f3618f31cb91dba29264ea0ab6f05.588f3618.png"},1442:function(t,e,s){t.exports=s.p+"assets/img/3119dea0ab1c2c93fb6bd2dc500476ab.3119dea0.png"},1443:function(t,e,s){t.exports=s.p+"assets/img/dbe5ce11d8968387402bb48b733a5146.dbe5ce11.png"},1444:function(t,e,s){t.exports=s.p+"assets/img/ccdbb32b1e41ce365fc7a296feba2699.ccdbb32b.png"},1445:function(t,e,s){t.exports=s.p+"assets/img/image-20201230141321649.c9aa7936.png"},1446:function(t,e,s){t.exports=s.p+"assets/img/97ce94dbc562c7a5e9e9eeb9b9cfeb16.97ce94db.png"},1447:function(t,e,s){t.exports=s.p+"assets/img/image-20201230143059874.5c0b3570.png"},2150:function(t,e,s){"use strict";s.r(e);var a=s(13),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_03丨分组与引用-如何用正则实现更复杂的查找和替换操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03丨分组与引用-如何用正则实现更复杂的查找和替换操作"}},[t._v("#")]),t._v(" 03丨分组与引用：如何用正则实现更复杂的查找和替换操作？")]),t._v(" "),a("p",[t._v("今天我打算和你聊聊分组与引用。那什么场合下会用到分组呢？")]),t._v(" "),a("p",[t._v("假设我们现在要去查找 15 位或 18 位数字。根据前面学习的知识，使用量词可以表示出现次数，使用管道符号可以表示多个选择，你应该很快就能写出 "),a("code",[t._v("\\d{15}|\\d{18}")]),t._v("。但经过测试，你会发现，这个正则并不能很好地完成任务，因为 18 位数字也会匹配上前 15 位，具体如下图所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1431),alt:"img"}})]),t._v(" "),a("p",[t._v("为了解决这个问题，你灵机一动，很快就想到了办法，就是把 15 和 18 调换顺序，即写成  "),a("code",[t._v("\\d{18}|\\d{15}")]),t._v("。你发现，这回符合要求了。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1432),alt:"img"}})]),t._v(" "),a("p",[t._v("上述测试文本为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("123456789012345\n123456789012345678\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("使用 "),a("code",[t._v("\\d{15,18}")]),t._v(" 也可以实现要求。")]),t._v(" "),a("p",[t._v("为什么会出现这种情况呢？"),a("strong",[t._v("因为在大多数正则实现中，多分支选择都是左边的优先")]),t._v("。")]),t._v(" "),a("p",[t._v("类似地，你可以使用 "),a("code",[t._v("北京市|北京")]),t._v(" 来查找 「北京」 和 「北京市」。另外我们前面学习过，问号可以表示出现 0 次或 1 次，你发现可以使用 "),a("code",[t._v("北京市?")]),t._v(" 来实现来查找「北京」 和 「北京市」")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1433),alt:"img"}})]),t._v(" "),a("p",[t._v("测试文本为：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("北京市，简称“京”，古称燕京、北平\n北京有长城\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("同样，针对 15 或 18 位数字这个问题，可以看成是 15 位数字，后面 3 位数据有或者没有，你应该很快写出了 "),a("code",[t._v("\\d{15}\\d{3}?")]),t._v(" 。但这样写对不对呢？我们来看一下。")]),t._v(" "),a("p",[t._v("在上一节我们学习了量词后面加问号表示非贪婪，而我们现在想要的是 "),a("code",[t._v("\\d{3}")]),t._v(" 出现 0 次或 1 次。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("示例一：")]),t._v(" "),a("p",[a("code",[t._v("\\d{15}\\d{3}?")]),t._v("   由于  "),a("code",[t._v("\\d{3}")]),t._v("  表示三次，加问号非贪婪还是 3 次")])]),t._v(" "),a("li",[a("p",[t._v("示例二：")]),t._v(" "),a("p",[a("code",[t._v("\\d{15}(\\d{3})?")]),t._v(" 在 "),a("code",[t._v("\\d{3}")]),t._v(" 整体后加问号，表示后面三位有或无")])])]),t._v(" "),a("p",[t._v("这时候，必须使用 "),a("strong",[t._v("括号")]),t._v(" 将来把表示 "),a("strong",[t._v("三个数字")]),t._v(" 的 "),a("code",[t._v("\\d{3}")]),t._v(" 这一部分括起来，也就是表示成 "),a("code",[t._v("\\d{15}(\\d{3})?")]),t._v(" 这样。现在就比较清楚了："),a("strong",[t._v("括号在正则中的功能就是用于分组")]),t._v("。简单来理解就是，由多个元字符组成某个部分，应该被看成一个整体的时候，可以用括号括起来表示一个整体，这是括号的一个重要功能。其实用括号括起来还有另外一个作用，那就是 "),a("strong",[t._v("复用")]),t._v("，我接下来会给你讲讲这个作用。")]),t._v(" "),a("h2",{attrs:{id:"分组与编号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组与编号"}},[t._v("#")]),t._v(" 分组与编号")]),t._v(" "),a("p",[t._v("括号在正则中可以 "),a("strong",[t._v("用于分组")]),t._v("，被括号括起来的部分 「子表达式」会被保存成一个 "),a("strong",[t._v("子组")]),t._v("。")]),t._v(" "),a("p",[t._v("那分组和编号的规则是怎样的呢？其实很简单，用一句话来说就是，第几个括号就是第几个分组。这么说可能不好理解，我们来举一个例子看一下。")]),t._v(" "),a("p",[t._v("这里有个时间格式 2020-05-10 20:23:05。假设我们想要使用正则提取出里面的日期和时间。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1434),alt:"img"}})]),t._v(" "),a("p",[t._v("我们可以写出如图所示的正则，将日期和时间都括号括起来。这个正则中一共有两个分组，日期是第 1 个，时间是第 2 个。")]),t._v(" "),a("h3",{attrs:{id:"不保存子组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不保存子组"}},[t._v("#")]),t._v(" 不保存子组")]),t._v(" "),a("p",[a("strong",[t._v("在括号里面的会保存成子组")]),t._v("，但有些情况下，你可能只想用括号将某些部分看成一个整体，"),a("strong",[t._v("后续不用再用它")]),t._v("，类似这种情况，在实际使用时，是没必要保存子组的。这时我们可以在括号里面使用 "),a("code",[t._v("?:")]),t._v("  不保存子组。")]),t._v(" "),a("p",[t._v("如果正则中出现了括号，那么我们就认为，"),a("strong",[t._v("这个子表达式在后续可能会再次被引用")]),t._v("，所以 "),a("strong",[t._v("不保存子组可以提高正则的性能")]),t._v("。除此之外呢，这么做还有一些好处，由于子组变少了，正则性能会更好，在 "),a("strong",[t._v("子组计数时也更不容易出错")]),t._v("。")]),t._v(" "),a("p",[t._v("那到底啥是不保存子组呢？我们可以理解成，"),a("strong",[t._v("括号只用于归组，把某个部分当成「单个元素」，不分配编号，后面不会再进行这部分的引用")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1435),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1436),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"括号嵌套"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#括号嵌套"}},[t._v("#")]),t._v(" 括号嵌套")]),t._v(" "),a("p",[t._v("前面讲完了子组和编号，但有些情况会比较复杂，比如在括号嵌套的情况里，我们要看某个括号里面的内容是第几个分组怎么办？不要担心，其实方法很简单，我们只需要数左括号（开括号）是第几个，就可以确定是第几个子组。")]),t._v(" "),a("p",[t._v("在阿里云简单日志系统中，我们可以使用正则来匹配一行日志的行首。假设时间格式是 2020-05-10 20:23:05 。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1437),alt:"img"}})]),t._v(" "),a("p",[t._v("日期分组编号是 1，时间分组编号是 5，年月日对应的分组编号分别是 2，3，4，时分秒的分组编号分别是 6，7，8。")]),t._v(" "),a("h3",{attrs:{id:"命名分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名分组"}},[t._v("#")]),t._v(" 命名分组")]),t._v(" "),a("p",[t._v("前面我们讲了分组编号，但由于编号得数在第几个位置，后续如果发现正则有问题，改动了括号的个数，还 "),a("strong",[t._v("可能导致编号发生变化")]),t._v("，因此一些编程语言提供了 "),a("strong",[t._v("命名分组（named grouping）")]),t._v("，这样和数字相比更容易辨识，不容易出错。命名分组的格式为 "),a("code",[t._v("(?P<分组名>正则)")]),t._v("。")]),t._v(" "),a("p",[t._v("比如在 Django 的路由中，命名分组示例如下：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("url(r'^profile/(?P<username>\\w+)/$', view_func)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("需要注意的是，刚刚提到的方式命名分组和前面一样，给这个分组分配一个编号，不过你可以使用名称，不用编号，实际上命名分组的编号已经分配好了。不过命名分组并不是所有语言都支持的，在使用时，你需要查阅所用语言正则说明文档，如果支持，那你才可以使用。")]),t._v(" "),a("h2",{attrs:{id:"分组引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组引用"}},[t._v("#")]),t._v(" 分组引用")]),t._v(" "),a("p",[t._v("在知道了分组引用的编号 （number）后，大部分情况下，我们就可以使用 "),a("code",[t._v("反斜扛 + 编号")]),t._v("，即  "),a("code",[t._v("\\number")]),t._v("  的方式来进行引用，而 JavaScript 中是通过 "),a("code",[t._v("$编号")]),t._v(" 来引用，如 "),a("code",[t._v("$1")]),t._v("。")]),t._v(" "),a("p",[t._v("我给到了你一些在常见的编程语言中，分组查找和替换的引用方式：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("变成语言")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("查找时引用方式")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("替换时引用方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Python")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("\\number")]),t._v(" 如 "),a("code",[t._v("\\1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("\\number")]),t._v(" 如 "),a("code",[t._v("\\1")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Go")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("官方不支持")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("官方不支持")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Java")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("\\number")]),t._v(" 如 "),a("code",[t._v("\\1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("$number")]),t._v(" 如 "),a("code",[t._v("$1")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("JavaScript")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("$number")]),t._v(" 如 "),a("code",[t._v("$1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("$number")]),t._v(" 如 "),a("code",[t._v("$1")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("PHP")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("\\number")]),t._v(" 如 "),a("code",[t._v("\\1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("\\number")]),t._v(" 如 "),a("code",[t._v("\\1")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Ruby")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("\\number")]),t._v(" 如 "),a("code",[t._v("\\1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("\\number")]),t._v(" 如 "),a("code",[t._v("\\1")])])])])]),t._v(" "),a("p",[t._v("这些内容不要求你完全记住，只要有个印象就好，最关键的是要知道正则可以实现这样的功能，")]),t._v(" "),a("p",[t._v("需要用到的时候查一下相应的文档，就知道怎么用了。")]),t._v(" "),a("h2",{attrs:{id:"分组引用在查找中使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组引用在查找中使用"}},[t._v("#")]),t._v(" 分组引用在查找中使用")]),t._v(" "),a("p",[t._v("前面介绍了子组和引用的基本知识，现在我们来看下在 "),a("strong",[t._v("正则查找时如何使用分组引用")]),t._v("。比如我们要找重复出现的单词，我们使用正则可以很方便地使「前面出现的单词再次出现」，具体要怎么操作呢？我们可以使用  "),a("code",[t._v("\\w+")]),t._v("  来表示一个单词，针对刚刚的问题，我们就可以很容易写出 "),a("code",[t._v("(\\w+) \\1")]),t._v("  这个正则表达式了。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1438),alt:"img"}})]),t._v(" "),a("p",[t._v("练习文本为")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("the little cat cat is in the hat hat,we like it\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"分组引用在替换中使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组引用在替换中使用"}},[t._v("#")]),t._v(" 分组引用在替换中使用")]),t._v(" "),a("p",[t._v("和查找类似，我们可以使用 "),a("strong",[t._v("反向引用")]),t._v("，在得到的结果中，去拼出来我们想要的结果。还是使用刚刚日期时间的例子，我们可以很方便地将它替换成， 2020 年 05 月 10 日这样的格式。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1439),alt:"img"}})]),t._v(" "),a("p",[t._v("练习文本为")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2020-05-10 20:23:05\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("表达式与应用")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\n\n\\1 年 \\2 月 \\3 日 \\4 时 \\5 分 \\6 秒\n\n这里和图上的不完全一样，自己尝试去练习的\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("练习示例：https://regex101.com/r/2RVPTJ/2。")]),t._v(" "),a("p",[t._v("不知道学到这里，你有没有觉得子组和引用非常强大呢？")]),t._v(" "),a("p",[t._v("你可能很好奇，那在编程语言中如何实现这个功能呢？我下面以 Python3 为例，给出一个示例。")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" test_str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-05-10 20:23:05"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('r"((\\d{4})-(\\d{2})-(\\d{2})) ((\\d{2}):(\\d{2}):(\\d{2}))"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" subst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('r"日期\\1 时间\\5   \\2年\\3月\\4日 \\6时\\7分\\8秒"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'日期2020-05-10 时间20:23:05   2020年05月10日 20时23分05秒'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"在文本编辑器中使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在文本编辑器中使用"}},[t._v("#")]),t._v(" 在文本编辑器中使用")]),t._v(" "),a("h3",{attrs:{id:"sublime-text-3-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sublime-text-3-简介"}},[t._v("#")]),t._v(" Sublime Text 3 简介")]),t._v(" "),a("p",[t._v("接下来我用 Sublime Text 3 来当例子，给你讲解一下正则查找和替换的使用方式。Sublime Text 3 是一个跨平台编辑器，非常小巧、强悍，虽然是一个收费软件，但可以永久试用，你自行可以下载安装。")]),t._v(" "),a("p",[t._v("当熟练使用编辑器之后，你会发现在很多工作里都可以使用它，不需要编写代码就可以完成。")]),t._v(" "),a("p",[t._v("下面我以文本编辑器 Sublime Text 3 为例，来讲解正则查找和替换的使用方式。首先，我们要使用的「查找」或「替换」功能，在菜单 Find 中可以找到。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1440),alt:"img"}})]),t._v(" "),a("p",[t._v("下面是对编辑器查找 - 替换界面的图标简介，Find 输入栏第一个 "),a("code",[t._v(".*")]),t._v("  图标，表示开启或关闭正则支持。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1441),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"编辑器中进行正则查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑器中进行正则查找"}},[t._v("#")]),t._v(" 编辑器中进行正则查找")]),t._v(" "),a("p",[t._v("接下来，我们来演示用编辑器查找引号引起来的内容，课程中使用到的文本，建议你用 chrome 等浏览器等，打开极客时间网页版本 https://time.geekbang.org，点击右键查看源代码，把看到的代码复制到 Sublime Text 3 中。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1442),alt:"img"}})]),t._v(" "),a("p",[t._v("输入相应的正则，我们就可以看到查找的效果了。这里给一个小提示，如果你点击 Find All，然后进行剪切，具体操作可以在菜单中找到 "),a("code",[t._v("Edit -> Cut")]),t._v("，也可以使用快捷键操作。剪切之后，找一个空白的地方，粘贴就可以看到提取出的所有内容了。")]),t._v(" "),a("p",[t._v("我们可以使用正则进行资源链接提取，比如从一个图片网站的源代码中查找到图片链接，然后再使用下载工具批量下载这些图片。")]),t._v(" "),a("h3",{attrs:{id:"在编辑器中进行正则替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在编辑器中进行正则替换"}},[t._v("#")]),t._v(" 在编辑器中进行正则替换")]),t._v(" "),a("p",[t._v("接着，我们再来看一下在编辑器中进行文本替换工作。你可以在编辑器中输入这些文本：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("the little cat cat is in the hat hat, we like it.\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果我们要尝试从中查找连续重复出现两次的单词，我们可以用 \\w+ 代表单词，利用我们刚刚学习的知识，相信你可以很快写出正则  "),a("code",[t._v("(\\w+) \\1")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1443),alt:"img"}})]),t._v(" "),a("p",[t._v("接着点击菜单中的 "),a("code",[t._v("Find -> Replace")]),t._v("，在替换栏中输入子组的引用  "),a("code",[t._v("\\1")]),t._v(" ，然后点击 Replace All 就可以完成替换工作了。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1444),alt:"img"}})]),t._v(" "),a("p",[t._v("这样，通过少量的正则，我们就完成了文本的处理工作了。")]),t._v(" "),a("p",[t._v("几乎所有主流编辑器都是支持正则的，你可以在你喜欢的编辑器中尝试一下这个例子，在后面的工作中，也可以尝试使用它来完成一些复杂的文本查找和替换工作。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("好了，今天的内容讲完了，我来带你总结回顾一下。")]),t._v(" "),a("p",[t._v("今天我们学习到了正则中的分组和子组编号相关内容。括号可以将某部分括起来，看成一个整体，也可以保存成一个子组，在后续查找替换的时候使用。分组编号是指，在正则中第几个括号内就是第几个分组，而嵌套括号我们只要看左括号是第几个就可以了。如果不想将括号里面的内容保存成子组，可以在括号里面加上 "),a("code",[t._v("?:")]),t._v("  来解决。")]),t._v(" "),a("p",[t._v("搞懂了分组的内容，我们就可以利用分组引用，来实现将「原文本部分内容」，在查找或替换时进行再次利用，达到实现复杂文本的查找和替换工作。甚至在使用一些文本编辑器的时候，不写代码，我们就可以完成文本的查找替换处理工作，这往往可以节约很多开发时间。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1445),alt:"image-20201230141321649"}})]),t._v(" "),a("h2",{attrs:{id:"课后思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#课后思考"}},[t._v("#")]),t._v(" 课后思考")]),t._v(" "),a("p",[t._v("有一篇英文文章，里面有一些单词连续出现了多次，我们认为连续出现多次的单词应该是一次，比如：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("the little cat cat is in the hat hat hat, we like it.\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("其中 cat 和 hat 连接出现多次，要求处理后结果是")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("the little cat is in the hat, we like it.\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:s(1446),alt:"img"}})]),t._v(" "),a("p",[t._v("这个题目我给出了相应的地址 https://regex101.com/r/2RVPTJ/3，你可以直接在网页上进行测试，写入相应的 「正则查找部分」 和 「正则替换部分」，让结果符合预期。多动手练习，你才能更好地掌握学习的内容。")]),t._v(" "),a("p",[t._v("练习文本为")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("the little cat cat is in the hat hat hat, we like it.\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("答案为")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1447),alt:"image-20201230143059874"}})]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("正则部分： (\\w+)((\\s+)+\\1)+   这个更精简  (\\w+)(\\s+\\1)+\n正则替换部分：\\1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("解释：")]),t._v(" "),a("p",[t._v("正则部分：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("\\w+")]),t._v("：匹配每个单词，默认是贪婪模式，可以匹配到每个单词")]),t._v(" "),a("p",[t._v("因为单词中间是用空格分割的，而 "),a("code",[t._v("\\w")]),t._v(" 中不包含空格")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("\\s+")]),t._v(" 匹配的是 1 到 多个空格，hat 前面最多是有 2 个空格的")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("\\1")]),t._v(" 应用了 "),a("code",[t._v("(\\w+)")]),t._v(", 来组成重复的效果")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("(\\s+\\1)+")]),t._v("：另外用了括号嵌套，将任意空格和重复单词，看成是一个整体，可以出现 1 到多次")])])]),t._v(" "),a("p",[t._v("替换部分： "),a("code",[t._v("\\1")]),t._v(" 引用的是 "),a("code",[t._v("(\\w+)")]),t._v(" 这组，不包含空格的单词。笔者这里不太理解直接使用引用，怎么就显示全文了？")])])}),[],!1,null,null,null);e.default=v.exports}}]);