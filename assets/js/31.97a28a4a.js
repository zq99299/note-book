(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{1408:function(t,a,s){t.exports=s.p+"assets/img/2b3e3f549e69fdd398c15d6b0bd44e08.2b3e3f54.png"},1409:function(t,a,s){t.exports=s.p+"assets/img/b0c582cbf8ec081bc798296b5471804c.b0c582cb.png"},1410:function(t,a,s){t.exports=s.p+"assets/img/10e40baa1194b17dcc57a089524a37bc.10e40baa.png"},1411:function(t,a,s){t.exports=s.p+"assets/img/3f95a3648980c1eb3c550fb34b46fad1.3f95a364.png"},1412:function(t,a,s){t.exports=s.p+"assets/img/40c03d7a2cb990b35e4801589eca1379.40c03d7a.png"},1413:function(t,a,s){t.exports=s.p+"assets/img/7a9636b588963e5af9619837fe5a6888.7a9636b5.png"},1414:function(t,a,s){t.exports=s.p+"assets/img/2177c740a2d5dd805f3157d54636500c.2177c740.png"},1415:function(t,a,s){t.exports=s.p+"assets/img/96635e198c2ff6cf7b8ea2a0d18f8ecb.96635e19.png"},1416:function(t,a,s){t.exports=s.p+"assets/img/image-20201230120131547.978edc95.png"},2148:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_02丨量词与贪婪-小小的正则-也可能把-cpu-拖垮"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02丨量词与贪婪-小小的正则-也可能把-cpu-拖垮"}},[t._v("#")]),t._v(" 02丨量词与贪婪：小小的正则，也可能把 CPU 拖垮！")]),t._v(" "),e("p",[t._v("在上一讲中，我们已经学习了正则中和一些元字符相关的内容。这一节我们讲一下正则中的三种模式，贪婪匹配、非贪婪匹配和独占模式。")]),t._v(" "),e("p",[t._v("这些模式会改变正则中量词的匹配行为，比如匹配一到多次；"),e("strong",[t._v("在匹配的时候，匹配长度是尽可能长还是要尽可能短呢？")]),t._v(" 如果不知道贪婪和非贪婪匹配模式，我们写的正则很可能是错误的，这样匹配就达不到期望的效果了。")]),t._v(" "),e("h2",{attrs:{id:"为什么会有贪婪与非贪婪模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么会有贪婪与非贪婪模式"}},[t._v("#")]),t._v(" 为什么会有贪婪与非贪婪模式？")]),t._v(" "),e("p",[t._v("由于本节内容和量词相关的元字符密切相关，所以我们先来回顾一下正则中表示量词的元字符。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(336),alt:"img"}})]),t._v(" "),e("p",[t._v("在这 6 种元字符中，我们可以用 "),e("code",[t._v("{m,n}")]),t._v("  来表示  （"),e("code",[t._v("*")]),t._v("）（"),e("code",[t._v("+")]),t._v("）（"),e("code",[t._v("?")]),t._v("） 这 3 种元字符：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("同义表示方法")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("示例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("*")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("{0,}")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ab*")]),t._v(" 可以匹配 "),e("code",[t._v("a")]),t._v(" 或 "),e("code",[t._v("abbb")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("+")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("{1,}")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ab+")]),t._v(" 可以匹配 "),e("code",[t._v("ab")]),t._v(" 或 "),e("code",[t._v("abbb")]),t._v("，但不能匹配 "),e("code",[t._v("a")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("?")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("{0,1}")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("(\\+86-)?\\d{11}")]),t._v(" 可以匹配 "),e("code",[t._v("+86-13800138000")]),t._v(" 或 "),e("code",[t._v("13800138000")])])])])]),t._v(" "),e("p",[t._v("表示量词的星号（"),e("code",[t._v("*")]),t._v("）和 加号（"),e("code",[t._v("+")]),t._v("）可能没你想象的那么简单，我用一个例子给你讲解一下。我们先看一下加号（"),e("code",[t._v("+")]),t._v("），使用 "),e("code",[t._v("a+")]),t._v(" 在 "),e("code",[t._v("aaabb")]),t._v(" 中查找，可以看到只有一个输出结果：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(1408),alt:"img"}})]),t._v(" "),e("p",[t._v("对应的 Python 代码如下：")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'a+'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaabb'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("加号应该很容易理解，我们再使用 "),e("code",[t._v("a*")]),t._v("  在 aaabb 这个字符串中进行查找，这次我们看到可以找到 4 个匹配结果。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(1409),alt:"img"}})]),t._v(" "),e("p",[t._v("使用 Python 示例如下，我们可以看到输出结果，也是得到了 4 个匹配结果：")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'a*'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaabb'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("但这一次的结果 "),e("strong",[t._v("匹配到了三次空字符串")]),t._v("。为什么会匹配到空字符串呢？因为星号（"),e("code",[t._v("*")]),t._v("）代表 0 到多次，"),e("strong",[t._v("匹配 0 次就是空字符串")]),t._v("。到这里，你可能会有疑问，如果这样，aaa 部分应该也有空字符串，为什么没匹配上呢？")]),t._v(" "),e("p",[t._v("这就引入了我们今天要讲的话题，贪婪与非贪婪模式。"),e("strong",[t._v("这两种模式都必须满足匹配次数的要求才能匹配上")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("贪婪模式，简单说就是尽可能进行 "),e("strong",[t._v("最长匹配")]),t._v("。")]),t._v(" "),e("li",[t._v("非贪婪模式呢，则会尽可能进行 "),e("strong",[t._v("最短匹配")]),t._v("。")])]),t._v(" "),e("p",[t._v("正是这两种模式产生了不同的匹配结果。")]),t._v(" "),e("h2",{attrs:{id:"贪婪、非贪婪与独占模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贪婪、非贪婪与独占模式"}},[t._v("#")]),t._v(" 贪婪、非贪婪与独占模式")]),t._v(" "),e("h3",{attrs:{id:"贪婪匹配-greedy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配-greedy"}},[t._v("#")]),t._v(" 贪婪匹配（Greedy）")]),t._v(" "),e("p",[t._v("首先，我们来看一下贪婪匹配。在正则中，表示次数的量词 "),e("strong",[t._v("默认是贪婪的")]),t._v("，在贪婪模式下，会尝试尽可能最大长度去匹配。")]),t._v(" "),e("p",[t._v("首先，我们来看一下在字符串 aaabb 中使用正则 "),e("code",[t._v("a*")]),t._v(" 的匹配过程。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("字符串")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("aaabb")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("下标")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("012345")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("匹配")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("开始")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("结束")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("匹配内容")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("第 1 次")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("到第一个字母 b 发现不满足，输出 aaa")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("aaa")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("第 2 次")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("匹配剩下的 bb，发现匹配不上，输出空字符串")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("空字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("第 3 次")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("匹配剩下的 b，发现匹配不上，输出空字符串")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("空字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("第 4 次")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("匹配剩下的空字符串，输出空字符串")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("空字符串")])])])]),t._v(" "),e("p",[e("code",[t._v("a*")]),t._v(" 在匹配开头的 a 时，会尝试尽量匹配更多的 a，直到第一个字母 b 不满足要求为止，匹配上三个 a，后面每次匹配时都得到了空字符串。")]),t._v(" "),e("p",[t._v("相信看到这里你也发现了，"),e("strong",[t._v("贪婪模式的特点就是尽可能进行最大长度匹配")]),t._v("。所以要不要使用贪婪模式是根据需求场景来定的。如果我们想尽可能最短匹配呢？那就要用到非贪婪匹配模式了。")]),t._v(" "),e("h3",{attrs:{id:"非贪婪匹配-lazy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪匹配-lazy"}},[t._v("#")]),t._v(" 非贪婪匹配（Lazy）")]),t._v(" "),e("p",[t._v("那么如何将贪婪模式变成非贪婪模式呢？我们 "),e("strong",[t._v("可以在量词后面加上英文的问号 ("),e("code",[t._v("?")]),t._v(")")]),t._v("，正则就变成了 "),e("code",[t._v("a*?")]),t._v("。此时的匹配结果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(1410),alt:"img"}})]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'a*'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaabb'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 贪婪模式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'a*?'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaabb'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 非贪婪模式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("这一次我们可以看到，这次匹配到的结果都是单个的 a，就连每个 a 左边的空字符串也匹配上了。")]),t._v(" "),e("p",[t._v("到这里你可能就明白了，非贪婪模式会尽可能短地去匹配，我把这两者之间的区别写到了下面这张图中。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(1411),alt:"img"}})]),t._v(" "),e("p",[t._v("为了让你加深理解，我们再来看一个示例，这一次让我们查找一下引号中的单词。")]),t._v(" "),e("p",[t._v("从下面这个示例中，我们可以很容易看出两者对比上的差异。左右的文本是一样的，其中有两对双引号。不同之处在于，"),e("strong",[t._v("左边的示例中，不加问号时正则是贪婪匹配")]),t._v("，匹配上了从第一个引号到最后一个引号之间的所有内容；"),e("strong",[t._v("而右边的图是非贪婪匹配")]),t._v("，找到了符合要求的结果。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(1412),alt:"img"}})]),t._v(" "),e("p",[t._v("测试文本为")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('"the little cat" is a toy,it looks "a little bad".\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h3",{attrs:{id:"独占模式-possessive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#独占模式-possessive"}},[t._v("#")]),t._v(" 独占模式（Possessive）")]),t._v(" "),e("p",[t._v("不管是贪婪模式，还是非贪婪模式，"),e("strong",[t._v("都需要发生回溯才能完成相应的功能")]),t._v("。但是在一些场景下，我们不需要回溯，匹配不上返回失败就好了，因此正则中还有另外一种模式，独占模式，它类似贪婪匹配，但匹配过程不会发生回溯，因此在一些场合下性能会更好。")]),t._v(" "),e("p",[t._v("你可能会问，那什么是回溯呢？我们来看一些例子，例如下面的正则：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("regex = “xy{1,3}z”\ntext = “xyyz”\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("在匹配时，"),e("code",[t._v("y{1,3}")]),t._v(" 会尽可能长地去匹配，当匹配完 xyy 后，由于 y 要尽可能匹配最长，即三个，但字符串中后面是个 z 就会导致匹配不上，这时候正则就会 "),e("strong",[t._v("向前回溯")]),t._v("，吐出当前字符 z，接着用正则中的 z 去匹配。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(1413),alt:"img"}})]),t._v(" "),e("p",[t._v("如果我们把这个正则 "),e("strong",[t._v("改成非贪婪模式")]),t._v("，如下：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("regex = “xy{1,3}?z”\ntext = “xyyz”\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("由于 "),e("code",[t._v("y{1,3}?")]),t._v(" 代表匹配 1 到 3 个 y，"),e("strong",[t._v("尽可能少地匹配")]),t._v("。匹配上一个 y 之后，也就是在匹配上 text 中的 xy 后，正则会使用 z 和 text 中的 xy 后面的 y 比较，发现正则 z 和 y 不匹配，这时正则就会 "),e("strong",[t._v("向前回溯")]),t._v("，重新查看 y 匹配两个的情况，匹配上正则中的 xyy，然后再用 z 去匹配 text 中的 z，匹配成功。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(1414),alt:"img"}})]),t._v(" "),e("p",[t._v("要仔细看两张图片，简单说：他们匹配时，算法不一致。")]),t._v(" "),e("p",[t._v("了解了回溯，我们再看下独占模式。")]),t._v(" "),e("p",[t._v("独占模式和贪婪模式很像，"),e("strong",[t._v("独占模式会尽可能多地去匹配，如果匹配失败就结束，不会进行回溯")]),t._v("，这样的话就比较节省时间。具体的方法就是在量词后面加上加号（"),e("code",[t._v("+")]),t._v("）。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("regex = “xy{1,3}+yz”\ntext = “xyyz”\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[e("img",{attrs:{src:s(1415),alt:"img"}})]),t._v(" "),e("p",[t._v("这里需要简单说下：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("text = “xyyz”\n\n# 这里的正则表达式写法与前面的不一样了，如果去掉 + ，独占模式，则默认为 贪婪模式\nregex = “xy{1,3}yz”   \n# 匹配到 2 个 y 之后，在文本中下一个字符是 z，这个时候匹配不上量词中的 1-3,也就是不是 y\n# 则发生回溯，吐出了 z，实际上前面量词匹配到的则是 xy,而不是 xyy\n\n# 当是独占模式的时候，尽可能多的匹配\nregex = “xy{1,3}+yz”  \n# 也就是说，优先满足量词中的要求，尽量匹配 3 个 y，这里匹配到 xyy 后，text 中只剩下一个 z 了\n# 那么此时，量词匹配就结束了，使用 z 去匹配正则中剩下的  yz，z 不匹配 y，则结束整个匹配过程，\n# 那么就匹配不上了\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("需要注意的是 Python 和 Go 的标准库目前都不支持独占模式，会报错，如下所示：")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'xy{1,3}+yz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyyz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nerror"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" multiple repeat at position "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("报错显示，加号（"),e("code",[t._v("+")]),t._v("）被认为是重复次数的元字符了。如果要测试这个功能，我们可以安装 PyPI 上的 regex 模块。")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("注意：需要先安装 regex 模块，pip install regex\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" regex\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" regex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'xy{1,3}z'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyyz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 贪婪模式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyyz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" regex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'xy{1,3}+z'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyyz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 独占模式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyyz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" regex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'xy{1,2}+yz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyyz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 独占模式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("你也可以使用 Java 或 Perl 等其它语言来测试独占模式，查阅相关文档，看一下你所用的语言对独占模式的支持程度。")]),t._v(" "),e("p",[t._v("如果你用 "),e("code",[t._v("a{1,3}+ab")]),t._v(" 去匹配 "),e("code",[t._v("aaab")]),t._v(" 字符串，"),e("code",[t._v("a{1,3}+")]),t._v(" 会把前面三个 a 都用掉，并且不会回溯，这样字符串中内容只剩下 b 了，导致正则中加号后面的 a 匹配不到符合要求的内容，匹配失败。如果是贪婪模式 "),e("code",[t._v("a{1,3}")]),t._v("  或非贪婪模式  "),e("code",[t._v("a{1,3}?")]),t._v("  都可以匹配上。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("正则")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("文本")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("结果")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("贪婪模式")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("a{1,3}ab")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("aaab")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("匹配")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("非贪婪模式")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("a{1,3}?ab")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("aaab")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("匹配")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("独占模式")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("a{1,3}+ab")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("aaab")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不匹配")])])])]),t._v(" "),e("p",[t._v("这里我简单总结一下，独占模式性能比较好，可以节约匹配的时间和 CPU 资源，但有些情况下并不能满足需求，要想使用这个模式还要看具体需求（比如我们接下来要讲的案例），另外还得看你当前使用的语言或库的支持程度。")]),t._v(" "),e("h2",{attrs:{id:"正则回溯引发的血案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则回溯引发的血案"}},[t._v("#")]),t._v(" 正则回溯引发的血案")]),t._v(" "),e("p",[t._v("学习到了这里，你是不是觉得自己对贪婪模式、非贪婪模式，以及独占模式比较了解了呢？其实在使用过程中稍不留神，就容易出问题，在网上可以看到不少因为回溯引起的线上问题。")]),t._v(" "),e("p",[t._v("这里我们挑选一个比较出名的，是阿里技术微信公众号上的发文。Lazada 卖家中心店 "),e("strong",[t._v("铺名检验规则")]),t._v(" 比较复杂，名称中可以出现下面这些组合：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("英文字母大小写；")])]),t._v(" "),e("li",[e("p",[t._v("数字；")])]),t._v(" "),e("li",[e("p",[t._v("越南文；")])]),t._v(" "),e("li",[e("p",[t._v("一些特殊字符，如 "),e("code",[t._v("&")]),t._v("，"),e("code",[t._v("-")]),t._v("，"),e("code",[t._v("_")]),t._v(" 等。")])])]),t._v(" "),e("p",[t._v("负责开发的小伙伴在开发过程中使用了正则来实现店铺名称校验，如下所示：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("^([A-Za-z0-9._()&'\\- ]|[aAàÀảẢãÃáÁạẠăĂằẰẳẲẵẴắẮặẶâÂầẦẩẨẫẪấẤậẬbBcCdDđĐeEèÈẻẺẽẼéÉẹẸêÊềỀểỂễỄếẾệỆfFgGhHiIìÌỉỈĩĨíÍịỊjJkKlLmMnNoOòÒỏỎõÕóÓọỌôÔồỒổỔỗỖốỐộỘơƠờỜởỞỡỠớỚợỢpPqQrRsStTuUùÙủỦũŨúÚụỤưƯừỪửỬữỮứỨựỰvVwWxXyYỳỲỷỶỹỸýÝỵỴzZ])+$\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这个正则比较长，但很好理解，中括号里面代表多选一，我们简化一下，就成下面这样：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("^([符合要求的组成1]|[符合要求的组成2])+$ \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("strong",[t._v("脱字符（"),e("code",[t._v("^")]),t._v("）代表以这个正则开头，美元符号（"),e("code",[t._v("$")]),t._v("）代表以正则结尾")]),t._v("，我们后面会专门进行讲解。这里可以先理解成整个店铺名称要能匹配上正则，即起到验证的作用。")]),t._v(" "),e("p",[t._v("你需要留意的是，"),e("strong",[t._v("正则中有个加号（"),e("code",[t._v("+")]),t._v("）")]),t._v("，"),e("strong",[t._v("表示前面的内容出现一到多次，进行贪婪匹配")]),t._v("，这样会导致大量回溯，占用大量 CPU 资源，引发线上问题，我们只需要将贪婪模式改成独占模式就可以解决这个问题。")]),t._v(" "),e("p",[t._v("我之前说过，要根据具体情况来选择合适的模式，在这个例子中，"),e("strong",[t._v("匹配不上时证明店铺名不合法，不需要进行回溯")]),t._v("，因此我们可以使用独占模式，但要注意并不是说所有的场合都可以用独占模式解决，我们要首先保证正则能满足功能需求。")]),t._v(" "),e("p",[t._v("仔细再看一下 这个正则，你会发现 「组成 1」 和 「组成 2」 部分中，A-Za-z 英文字母在两个集合里面重复出现了，这会导致回溯后的重复判断。这里要强调一下，并不是说有回溯就会导致问题，你应该尽量减少回溯后的计算量，这些在后面的原理讲解中我们会进一步学习。")]),t._v(" "),e("p",[t._v("说到这里，你是不是想起了课程开篇里面提到的一句话：")]),t._v(" "),e("blockquote",[e("p",[t._v("如果你有一个问题，你想到可以用正则来解决，那么你有两个问题了。")]),t._v(" "),e("p",[t._v("Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.")])]),t._v(" "),e("p",[t._v("所以一个小小的正则，有些时候也可能会把 CPU 拖垮，这也提醒我们在写正则的时候，一定要思考下回溯问题，避免使用低效的正则，引发线上问题。")]),t._v(" "),e("h2",{attrs:{id:"最后总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最后总结"}},[t._v("#")]),t._v(" 最后总结")]),t._v(" "),e("p",[t._v("最后我来给你总结一下：")]),t._v(" "),e("ul",[e("li",[t._v("正则中量词默认是贪婪匹配，")]),t._v(" "),e("li",[t._v("如果想要进行非贪婪匹配需要在 "),e("strong",[t._v("量词后面加")]),t._v(" 上问号（"),e("code",[t._v("?")]),t._v("）。")]),t._v(" "),e("li",[t._v("贪婪和非贪婪匹配都可能会进行回溯，独占模式也是进行贪婪匹配，但不进行回溯，因此在一些场景下，可以提高匹配的效率，具体能不能用独占模式需要看使用的编程语言的类库的支持情况，以及独占模式能不能满足需求。")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(1416),alt:"image-20201230120131547"}})]),t._v(" "),e("h2",{attrs:{id:"课后思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#课后思考"}},[t._v("#")]),t._v(" 课后思考")]),t._v(" "),e("p",[t._v("有一篇英文文章，里面有很多单词，单词和单词之间是用空格隔开的，在引号里面的一到多个单词表示特殊含义，即 "),e("strong",[t._v("引号里面的多个单词要看成一个单词")]),t._v("。现在你需要提取出文章中所有的单词。我们可以假设文章中除了引号没有其它的标点符号，有什么方法可以解决这个问题呢？如果用正则来解决，你能不能写出一个正则，提取出文章中所有的单词呢（不要求结果去重）？")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("we found “the little cat” is in the hat, we like “the little cat”\n\n其中 the little cat 需要看成一个单词\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("以下写法都可以满足：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# 单词或则是 引号中有任意单词或空格\n\\w+|“[\\w | ]+”\n\n# 单词或则是 引号中有任意字符，这里使用了 非贪婪模式，含义是匹配下一对 "" 引号（最短匹配）\n\\w+|“.+?”\n\n# 下面这个和上面的一样，只是使用了 () 组的方式，如果提取匹配的字符串的话，表现是：不包含引号\n\\w+|“(.+?)”\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports},336:function(t,a,s){t.exports=s.p+"assets/img/2b03098dcc203c648a40f89a0ba77fc3.2b03098d.png"}}]);