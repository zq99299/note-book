(window.webpackJsonp=window.webpackJsonp||[]).push([[502],{1950:function(t,s,a){"use strict";a.r(s);var e=a(13),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"获取-git-仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取-git-仓库"}},[t._v("#")]),t._v(" 获取 Git 仓库")]),t._v(" "),a("p",[t._v("有两种方式：")]),t._v(" "),a("ol",[a("li",[t._v("在现有目录中初始化仓库")]),t._v(" "),a("li",[t._v("克隆现有仓库")])]),t._v(" "),a("h2",{attrs:{id:"在现有目录中初始化仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在现有目录中初始化仓库"}},[t._v("#")]),t._v(" 在现有目录中初始化仓库")]),t._v(" "),a("p",[t._v("进入项目目录，并输入以下命令")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git init\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该命令将创建一个名为 "),a("code",[t._v(".git")]),t._v(" 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。")]),t._v(" "),a("p",[t._v("可以通过如下命令，对你的文件进行跟踪并提交。")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add 命令对指定文件进行跟踪")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.c\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" LICENSE\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# commit 命令进行提交")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'initial project version'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"克隆现有仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆现有仓库"}},[t._v("#")]),t._v(" 克隆现有仓库")]),t._v(" "),a("p",[t._v("Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。")]),t._v(" "),a("p",[t._v("克隆仓库的命令格式是 "),a("code",[t._v("git clone [url]")]),t._v(" 。 比如，要克隆 Git 的可链接库 libgit2，可以用下面的命令：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git clone https://github.com/libgit2/libgit2\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这会在当前目录下创建一个名为 「libgit2」 的目录，并在这个目录下初始化一个 "),a("code",[t._v(".git")]),t._v(" 文件夹，从远程仓库拉取下所有数据放入 "),a("code",[t._v(".git")]),t._v(" 文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的 libgit2 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。 如果你想在克隆远程仓库的时候，"),a("strong",[t._v("自定义本地仓库的名字")]),t._v("，你可以使用如下命令：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git clone https://github.com/libgit2/libgit2 mylibgit\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 mylibgit。")])])}),[],!1,null,null,null);s.default=n.exports}}]);