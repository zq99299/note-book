(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{1188:function(s,a,t){s.exports=t.p+"assets/img/6015b6b57bd6d21814c1304a181d64e3.a4e8d86d.png"},2015:function(s,a,t){"use strict";t.r(a);var e=t(13),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"git-引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-引用"}},[s._v("#")]),s._v(" Git 引用")]),s._v(" "),e("p",[s._v("我们可以借助类似于 "),e("code",[s._v("git log 1a410e")]),s._v("  这样的命令来 "),e("strong",[s._v("浏览完整的提交历史")]),s._v("，但为了能遍历那段历史从而找到所有相关对象，你仍须记住 1a410e 是最后一个提交。 "),e("strong",[s._v("我们需要一个文件来保存 SHA-1 值，并给文件起一个简单的名字，然后用这个名字指针来替代原始的 SHA-1 值")]),s._v("。")]),s._v(" "),e("p",[s._v("在 Git 里，这样的文件被称为  "),e("strong",[s._v("引用（references，或缩写为 refs）")]),s._v("；你可以在 "),e("code",[s._v(".git/refs")]),s._v("  目录下找到这类含有 SHA-1 值的文件。 在目前的项目中，这个目录没有包含任何文件，但它包含了一个简单的目录结构：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" .git/refs\n.git/refs\n.git/refs/heads\n.git/refs/tags\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" .git/refs -type f\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("若要创建一个新引用来帮助记忆最新提交所在的位置，从技术上讲我们只需简单地做如下操作：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1a410efbd13591db07496601ebc7a059dd55cfe9"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" .git/refs/heads/master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("现在，你就可以在 Git 命令中使用这个刚创建的新引用来代替 SHA-1 值了：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --pretty"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("oneline  master\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("我们不提倡直接编辑引用文件。 如果想更新某个引用，Git 提供了一个更加安全的命令 "),e("code",[s._v("update-ref")]),s._v(" 来完成此事：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("这基本就是 Git 分支的本质：一个指向某一系列提交之首的指针或引用")]),s._v("。 若想在第二个提交上创建一个分支，可以这么做：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" update-ref refs/heads/test cac0ca\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这个分支将只包含从第二个提交开始往前追溯的记录：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --pretty"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("oneline "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("至此，我们的 Git 数据库从概念上看起来像这样：")]),s._v(" "),e("p",[e("img",{attrs:{src:t(1188),alt:"包含分支引用的 Git 目录对象。"}})]),s._v(" "),e("p",[s._v("当运行类似于 "),e("code",[s._v("git branch (branchname)")]),s._v("  这样的命令时，Git 实际上会运行 "),e("code",[s._v("update-ref")]),s._v("  命令，取得当前所在分支最新提交对应的 SHA-1 值，并将其加入你想要创建的任何新引用中。")]),s._v(" "),e("h2",{attrs:{id:"head-引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#head-引用"}},[s._v("#")]),s._v(" HEAD 引用")]),s._v(" "),e("p",[s._v("现在的问题是，当你执行 "),e("code",[s._v("git branch (branchname)")]),s._v(" 时，Git 如何知道最新提交的 SHA-1 值呢？ 答案是 "),e("strong",[s._v("HEAD 文件")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("HEAD 文件是一个符号引用（symbolic reference）")]),s._v("，指向目前所在的分支。 所谓符号引用，意味着它并不像普通引用那样包含一个 SHA-1 值——它是一个指向其他引用的指针。 如果查看 HEAD 文件的内容，一般而言我们看到的类似这样：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" .git/HEAD\nref: refs/heads/master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("如果执行 "),e("code",[s._v("git checkout test")]),s._v("，Git 会像这样更新 HEAD 文件：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" .git/HEAD\nref: refs/heads/test\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("当我们执行 "),e("code",[s._v("git commit")]),s._v("  时，该命令会创建一个提交对象，并用 HEAD 文件中那个引用所指向的 SHA-1 值设置其父提交字段。")]),s._v(" "),e("p",[s._v("你也可以手动编辑该文件，然而同样存在一个更安全的命令来完成此事："),e("code",[s._v("symbolic-ref")]),s._v("。 可以借助此命令来查看 HEAD 引用对应的值：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" symbolic-ref HEAD\nrefs/heads/master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("同样可以设置 HEAD 引用的值：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" symbolic-ref HEAD refs/heads/test\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" .git/HEAD\nref: refs/heads/test\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("不能把符号引用设置为一个不符合引用格式的值：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" symbolic-ref HEAD "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\nfatal: Refusing to point HEAD outside of refs/\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"标签引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签引用"}},[s._v("#")]),s._v(" 标签引用")]),s._v(" "),e("p",[s._v("前文我们刚讨论过 Git 的三种主要对象类型，事实上还有第四种。 "),e("strong",[s._v("标签对象（tag object）")]),s._v(" 非常类似于一个提交对象——它包含一个标签创建者信息、一个日期、一段注释信息，以及一个指针。 "),e("strong",[s._v("主要的区别在于，标签对象通常指向一个提交对象，而不是一个树对象")]),s._v("。 它像是一个永不移动的分支引用——永远指向同一个提交对象，只不过给这个提交对象加上一个更友好的名字罢了。")]),s._v(" "),e("p",[s._v("正如 "),e("RouterLink",{attrs:{to:"/git-scm/02/"}},[s._v("Git 基础")]),s._v(" 中所讨论的那样，存在两种类型的标签：附注标签和轻量标签。 可以像这样创建一个轻量标签：")],1),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这就是轻量标签的全部内容——一个固定的引用。 然而，一个附注标签则更复杂一些。 若要创建一个附注标签，Git 会创建一个标签对象，并记录一个引用来指向该标签对象，而不是直接指向提交对象。 可以通过创建一个附注标签来验证这个过程（"),e("code",[s._v("-a")]),s._v("  选项指定了要创建的是一个附注标签）：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test tag'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("下面是上述过程所建标签对象的 SHA-1 值：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" .git/refs/tags/v1.1\n9585191f37f7b0fb9444f35a9bf50de191beadc2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("现在对该 SHA-1 值运行 "),e("code",[s._v("cat-file")]),s._v("  命令：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2\nobject 1a410efbd13591db07496601ebc7a059dd55cfe9\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" commit\ntag v1.1\ntagger Scott Chacon "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("schacon@gmail.com"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Sat May "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":48:58 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2009")]),s._v(" -0700\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" tag\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("我们注意到，object 条目指向我们打了标签的那个提交对象的 SHA-1 值。 另外要注意的是，标签对象并非必须指向某个提交对象；你可以对任意类型的 Git 对象打标签。 例如，在 Git 源码中，项目维护者将他们的 GPG 公钥添加为一个数据对象，然后对这个对象打了一个标签。 可以克隆一个 Git 版本库，然后通过执行下面的命令来在这个版本库中查看上述公钥：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" cat-file blob junio-gpg-pub\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("Linux 内核版本库同样有一个不指向提交对象的标签对象——首个被创建的标签对象所指向的是最初被引入版本库的那份内核源码所对应的树对象。")]),s._v(" "),e("h2",{attrs:{id:"远程引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程引用"}},[s._v("#")]),s._v(" 远程引用")]),s._v(" "),e("p",[s._v("我们将看到的第三种引用类型是 "),e("strong",[s._v("远程引用（remote reference）")]),s._v("。 如果你添加了一个远程版本库并对其执行过推送操作，Git 会记录下最近一次推送操作时每一个分支所对应的值，并保存在 "),e("code",[s._v("refs/remotes")]),s._v(" 目录下。 例如，你可以添加一个叫做 origin 的远程版本库，然后把 master 分支推送上去：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin git@github.com:schacon/simplegit-progit.git\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin master\nCounting objects: "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(", done.\nCompressing objects: "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("% "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("/5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", done.\nWriting objects: "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("% "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("/7"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("716")]),s._v(" bytes, done.\nTotal "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("delta "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", reused "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("delta "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nTo git@github.com:schacon/simplegit-progit.git\n  a11bef0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("ca82a6d  master -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("此时，如果查看  "),e("code",[s._v("refs/remotes/origin/master")]),s._v("  文件，可以发现 origin 远程版本库的 master 分支所对应的 SHA-1 值，就是最近一次与服务器通信时本地 master 分支所对应的 SHA-1 值：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" .git/refs/remotes/origin/master\nca82a6dff817ec66f44342007202690a93763949\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("远程引用和分支（位于  "),e("code",[s._v("refs/heads")]),s._v("  目录下的引用）之间最主要的区别在于，"),e("strong",[s._v("远程引用是只读的")]),s._v("。 虽然可以 git checkout 到某个远程引用，但是 Git 并不会将 HEAD 引用指向该远程引用。因此，你永远不能通过 commit 命令来更新远程引用。 Git 将这些远程引用作为记录远程服务器上各分支最后已知位置状态的书签来管理。")])])}),[],!1,null,null,null);a.default=n.exports}}]);